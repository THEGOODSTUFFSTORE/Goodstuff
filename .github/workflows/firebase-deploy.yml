name: Deploy to Firebase (DISABLED)

# Disabled - recommend using Vercel instead for Next.js apps with API routes
on:
  workflow_dispatch: # Only run manually
  # push:
  #   branches: [ main ]
  # pull_request:
  #   branches: [ main ]

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Validate environment variables
      run: |
        echo "Checking required environment variables..."
        if [ -z "$NEXT_PUBLIC_FIREBASE_API_KEY" ]; then echo "❌ NEXT_PUBLIC_FIREBASE_API_KEY is missing"; exit 1; fi
        if [ -z "$NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN" ]; then echo "❌ NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN is missing"; exit 1; fi
        if [ -z "$NEXT_PUBLIC_FIREBASE_PROJECT_ID" ]; then echo "❌ NEXT_PUBLIC_FIREBASE_PROJECT_ID is missing"; exit 1; fi
        if [ -z "$FIREBASE_PROJECT_ID" ]; then echo "❌ FIREBASE_PROJECT_ID is missing"; exit 1; fi
        if [ -z "$FIREBASE_PRIVATE_KEY" ]; then echo "❌ FIREBASE_PRIVATE_KEY is missing"; exit 1; fi
        if [ -z "$FIREBASE_CLIENT_EMAIL" ]; then echo "❌ FIREBASE_CLIENT_EMAIL is missing"; exit 1; fi
        echo "✅ Environment variables validated"
      env:
        NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
        NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
        NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
        FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
        FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY }}
        FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL }}
      
    - name: Build Next.js app
      run: npm run build
      env:
        NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
        NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
        NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
        NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
        NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
        NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}
        FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
        FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY }}
        FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL }}
        PESAPAL_CONSUMER_KEY: ${{ secrets.PESAPAL_CONSUMER_KEY }}
        PESAPAL_CONSUMER_SECRET: ${{ secrets.PESAPAL_CONSUMER_SECRET }}
        PESAPAL_IPN_ID: ${{ secrets.PESAPAL_IPN_ID }}
        NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL }}
        
    - name: Create Firebase Service Account JSON
      id: create_service_account
      run: |
        # Create service account JSON using environment variables and jq for proper escaping
        SERVICE_ACCOUNT_JSON=$(jq -n \
          --arg type "service_account" \
          --arg project_id "$PROJECT_ID" \
          --arg private_key "$PRIVATE_KEY" \
          --arg client_email "$CLIENT_EMAIL" \
          --arg auth_uri "https://accounts.google.com/o/oauth2/auth" \
          --arg token_uri "https://oauth2.googleapis.com/token" \
          --arg auth_provider_x509_cert_url "https://www.googleapis.com/oauth2/v1/certs" \
          --arg client_x509_cert_url "https://www.googleapis.com/robot/v1/metadata/x509/$CLIENT_EMAIL" \
          '{
            type: $type,
            project_id: $project_id,
            private_key_id: "",
            private_key: $private_key,
            client_email: $client_email,
            client_id: "",
            auth_uri: $auth_uri,
            token_uri: $token_uri,
            auth_provider_x509_cert_url: $auth_provider_x509_cert_url,
            client_x509_cert_url: $client_x509_cert_url
          }')
        
        # Set as output for next step
        echo "service_account_json<<EOF" >> $GITHUB_OUTPUT
        echo "$SERVICE_ACCOUNT_JSON" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
      env:
        PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
        PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY }}
        CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL }}
        
    - name: Deploy to Firebase
      uses: FirebaseExtended/action-hosting-deploy@v0
      with:
        repoToken: ${{ secrets.GITHUB_TOKEN }}
        firebaseServiceAccount: ${{ steps.create_service_account.outputs.service_account_json }}
        projectId: ${{ secrets.FIREBASE_PROJECT_ID }}
        channelId: live
        target: live 