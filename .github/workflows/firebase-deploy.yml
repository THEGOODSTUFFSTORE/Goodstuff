name: Deploy to Firebase

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Also allow manual runs

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Validate environment variables
      run: |
        echo "Checking required environment variables..."
        if [ -z "$NEXT_PUBLIC_FIREBASE_API_KEY" ]; then echo "❌ NEXT_PUBLIC_FIREBASE_API_KEY is missing"; exit 1; fi
        if [ -z "$NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN" ]; then echo "❌ NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN is missing"; exit 1; fi
        if [ -z "$NEXT_PUBLIC_FIREBASE_PROJECT_ID" ]; then echo "❌ NEXT_PUBLIC_FIREBASE_PROJECT_ID is missing"; exit 1; fi
        if [ -z "$FIREBASE_PROJECT_ID" ]; then echo "❌ FIREBASE_PROJECT_ID is missing"; exit 1; fi
        if [ -z "$FIREBASE_PRIVATE_KEY" ]; then echo "❌ FIREBASE_PRIVATE_KEY is missing"; exit 1; fi
        if [ -z "$FIREBASE_CLIENT_EMAIL" ]; then echo "❌ FIREBASE_CLIENT_EMAIL is missing"; exit 1; fi
        echo "✅ Environment variables validated"
      env:
        NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
        NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
        NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
        FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
        FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY }}
        FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL }}
      
    - name: Build Next.js app
      run: npm run build
      env:
        NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
        NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
        NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
        NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
        NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
        NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}
        FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
        FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY }}
        FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL }}
        PESAPAL_CONSUMER_KEY: ${{ secrets.PESAPAL_CONSUMER_KEY }}
        PESAPAL_CONSUMER_SECRET: ${{ secrets.PESAPAL_CONSUMER_SECRET }}
        PESAPAL_IPN_ID: ${{ secrets.PESAPAL_IPN_ID }}
        NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL }}
        
    - name: Prepare public directory for hosting
      run: |
        mkdir -p public
        echo '<html><body><h1>App deployed to Firebase Functions</h1><p>Visit your app at the function URL</p></body></html>' > public/index.html
        
    - name: Setup Functions
      run: |
        # Copy the built app to functions directory
        cp -r .next functions/
        cp -r public functions/
        cp package.json functions/
        cp package-lock.json functions/
        
        # Install function dependencies
        cd functions
        npm install
        
    - name: Install Firebase CLI
      run: npm install -g firebase-tools
        
    - name: Deploy to Firebase
      run: |
        # Create service account JSON using Python for reliable JSON handling
        python3 << 'EOF'
        import json
        import os
        
        # Get environment variables
        project_id = os.environ['PROJECT_ID']
        private_key = os.environ['PRIVATE_KEY']
        client_email = os.environ['CLIENT_EMAIL']
        
        # Handle escaped newlines in private key
        private_key = private_key.replace('\\n', '\n')
        
        # Create service account dictionary
        service_account = {
            "type": "service_account",
            "project_id": project_id,
            "private_key_id": "",
            "private_key": private_key,
            "client_email": client_email,
            "client_id": "",
            "auth_uri": "https://accounts.google.com/o/oauth2/auth",
            "token_uri": "https://oauth2.googleapis.com/token",
            "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
            "client_x509_cert_url": f"https://www.googleapis.com/robot/v1/metadata/x509/{client_email}"
        }
        
        # Write to file
        with open('firebase-service-account.json', 'w') as f:
            json.dump(service_account, f, indent=2)
        
        print("Service account JSON created successfully")
        EOF
        
        # Set up authentication
        export GOOGLE_APPLICATION_CREDENTIALS=./firebase-service-account.json
        
        # Verify the service account file exists and is valid
        echo "Verifying service account file..."
        if [ -f firebase-service-account.json ]; then
          echo "✓ Service account file exists"
          python3 -m json.tool firebase-service-account.json > /dev/null && echo "✓ Valid JSON format"
        else
          echo "✗ Service account file not found"
          exit 1
        fi
        
        # Deploy
        firebase deploy --project ${{ secrets.FIREBASE_PROJECT_ID }} --only hosting,functions --non-interactive
      env:
        PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
        PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY }}
        CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL }} 